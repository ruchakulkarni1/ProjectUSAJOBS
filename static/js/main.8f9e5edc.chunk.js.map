{"version":3,"sources":["Components/Map.js","API/jobsData.js","API/mapData.js","Components/showTableData.js","Components/Chart2.js","Components/Chart1.js","Components/statistics.js","Components/StateData.js","Components/FilterForStateMaps.js","Components/DonutChart.js","Components/publicJobs.js","Components/FilterForSearch.js","Components/search.js","App.js","reportWebVitals.js","index.js"],"names":["require","Highcharts","Maps","props","options","title","text","style","color","chart","backgroundColor","type","map","marginBottom","mapNavigation","enabled","enableButtons","credits","colorAxis","minimum","tooltip","pointFormatter","this","value","legend","align","verticalAlign","x","y","floating","layout","valueDecimals","defaultOptions","series","name","dataLabels","format","textTransform","ySuffix","cursor","joinBy","data","mapdata","jobdata","dataDict","forEach","element","k","locations","push","items","reduce","total","item","hasOwnProperty","countryCode","i","mapInfo","postalCode","properties","code","row","highcharts","constructorType","renderMapsData","getData","extension","a","jobs","fetch","method","mode","headers","response","json","Object","entries","key","SearchResult","SearchResultItems","dict","MatchedObjectDescriptor","PositionTitle","PositionURI","undefined","PositionLocation","PositionRemuneration","PositionSchedule","ApplicationCloseDate","UserArea","Details","HiringPath","JobSummary","MajorDuties","mapData","axios","get","ShowTableData","class","className","jobsCountArray","maxRem","parseFloat","remuneration","MaximumRange","minRem","MinimumRange","RateIntervalCode","Math","floor","groupByCity","result","currentValue","finalArr","min","max","elem","length","sort","b","state","jobCount","renderJobsData","styles","height","width","LineChart","stateArray","minArray","maxArray","labels","datasets","label","fill","borderColor","display","position","fontColor","fontSize","scales","yAxes","ticks","beginAtZero","xAxes","autoSkip","maxRotation","minRotation","tooltips","responsive","maintainAspectRatio","backgroundColors","borderColors","Houses","fieldCountArray","fieldNameArray","Field1","Field2","Field3","Field4","Field5","Field6","Field7","Field8","FieldName1","FieldName2","FieldName3","FieldName4","FieldName5","FieldName6","FieldName7","FieldName8","borderWidth","renderFieldData","Fields","stacked","jobTypeData","stateData","stateName","FTcount","PTcount","FullTime","PartTime","displayJobTime","StateData","citiesData","arr","id","res","index","valueDiv","className1","controls","date","data-toggle","data-target","aria-controls","results","renderStateData","FilterForStateMaps","for","onChange","e","setFilterData","target","statedata","renderFilteredData","StateChart","console","log","prepareChart","PublicJobs","gridLines","hiringPaths","Pcount","displayPublicJobs","clearFilters","document","getElementById","checked","FilterForSearch","required","selected","showStates","step","onClick","setSearchFilterData","filters","minSalary","maxSalary","field","partTime","fullTime","alert","getSelectedValue","Search","jobData","filter","searchFilterData","filterNames","keys","searchList","job","includes","Number","positionTitle","jobType","city","url","querySelector","textContent","href","showDetails","displayStateData","App","useState","setJobsData","mapsData","setMapsData","setJobTypeData","allStatesData","setAllStatesData","filterData","groupedByStates","setGroupedByStates","groupedByCities","setGroupByCities","selectedStateCityName","setselectedStateCityNames","selectedStateCityJobs","setselectedStateCityJobs","remunerationData","setRemunerationData","fieldData1","setFieldData1","setHiringPaths","useEffect","jobsData","data1","data2","data3","concat","getJobsData","array","groupBy","getRemunerations","count1","count2","count3","count4","count5","count6","count7","count8","getFieldData","getJobsByType","getMapsData","groupByState","stateHiringPaths","pubCount","hp","shp","hiringPath","getHiringPaths","statesData","features","allStatesInfo","byStates","groupByStates","cityName","split","byCities","cityNames","jobCountPerCity","sortElementsByCity","to","path","allfilters","fd","alignContent","typedata","Map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8f9e5edc.chunk.js","sourcesContent":["/*\r\nThis function is for returning the Maps as a highchart. So here we take the Maps data from the API,\r\njoin all the states using postal code, give all the options for the map and then return it.\r\nThe map data is got from App.js.\r\nOn hovering over each state of the map we display the job count.\r\nTo do this we get the jobs data from the usajobs API from App.js and for each state \r\nwe get the count of jobs, that count is displayed on hovering over each state.\r\n */\r\nimport React from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nrequire(\"highcharts/modules/map\")(Highcharts);\r\n\r\nfunction Maps(props) {\r\n  const options = {\r\n    title: {\r\n      text: \"\",\r\n      style: {\r\n        color: \"#fff\"\r\n      }\r\n    },\r\n    chart: {\r\n      backgroundColor: \"transparent\",\r\n      type: \"map\",\r\n      map: null,\r\n      marginBottom: 60\r\n    },\r\n    mapNavigation: {\r\n      enabled: true,\r\n      enableButtons: false\r\n    },\r\n    credits: {\r\n      enabled: false\r\n    },\r\n    colorAxis: {\r\n      minimum: 0\r\n    },\r\n    tooltip: {\r\n      pointFormatter: function () {\r\n        return '<div> Job Count: '+this.value+'</div>'\r\n      }\r\n    },\r\n    legend: {\r\n      align: 'center',\r\n      verticalAlign: 'bottom',\r\n      x: 0,\r\n      y: 0,\r\n      floating: true,\r\n      layout: \"horizontal\",\r\n      valueDecimals: 0,\r\n      backgroundColor:\r\n        (Highcharts.defaultOptions &&\r\n          Highcharts.defaultOptions.legend &&\r\n          Highcharts.defaultOptions.legend.backgroundColor) ||\r\n        \"rgba(255, 255, 255, 0.85)\"\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Available Jobs\",\r\n        dataLabels: {\r\n          enabled: true,\r\n          color: \"black\",\r\n          format: \"{point.postal-code}\",\r\n          style: {\r\n            textTransform: \"uppercase\"\r\n          }\r\n        },\r\n        tooltip: {\r\n          ySuffix: \" %\"\r\n        },\r\n        cursor: \"pointer\",\r\n        joinBy: \"postal-code\",\r\n        data: [],\r\n      }\r\n    ]\r\n  };\r\n  const renderMapsData = () => {\r\n    if(props.mapdata && props.jobdata) {\r\n      options.series[0].data = [];\r\n      options[\"chart\"][\"map\"] = props.mapdata.data;\r\n      let x = props.jobdata\r\n          let dataDict = []\r\n          x.forEach(element => {\r\n            let k = {}\r\n            k['countryCode'] = element.locations\r\n              dataDict.push(k)\r\n          });\r\n          const items = dataDict.reduce((total, item) => {\r\n            total.hasOwnProperty(item.countryCode)\r\n              ? total[item.countryCode]++\r\n              : (total[item.countryCode] = 1);\r\n        \r\n            return total;\r\n          }, {});\r\n          for (let i in props.mapdata.data[\"features\"]) {\r\n            let mapInfo = props.mapdata.data[\"features\"][i];\r\n            if (mapInfo[\"id\"]) {\r\n              var postalCode = mapInfo.properties[\"postal-code\"];\r\n              var name = mapInfo[\"properties\"][\"name\"];\r\n              var code = mapInfo[\"properties\"][\"hc-key\"]\r\n              var value = items[name];\r\n              var row = i;\r\n              options.series[0].data.push({\r\n                value: value,\r\n                name: name,\r\n                \"postal-code\": postalCode,\r\n                row: row,\r\n                code: code\r\n              });\r\n            }\r\n          }   \r\n        return(<div>\r\n          {options ? (\r\n            <HighchartsReact\r\n              highcharts={Highcharts}\r\n              constructorType={\"mapChart\"}\r\n              options={options}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>) \r\n    }\r\n  }\r\nreturn (\r\n  <div>\r\n    {renderMapsData()}\r\n  </div>\r\n)\r\n}\r\n\r\nexport default Maps","/* This function takes all the required data from the usajobs api using fetch.\r\nIt stores the required data into an array and returns it*/\r\nexport default async function getData(extension) {\r\n  var jobs = []\r\n  var dataDict = {}\r\n  const baseURL = 'https://data.usajobs.gov/api/Search?'\r\n  const response = await fetch(baseURL+extension, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          \"Host\": 'data.usajobs.gov',          \r\n          \"User-Agent\": 'larris2@pdx.edu',          \r\n          \"Authorization-Key\": 'LEiaFk9ZPCJKAet/KJYUgT4TVlBoImmw8V0Fh0ZTT20='\r\n        },\r\n  })\r\n  let data = await response.json();\r\n  for (const [key, value] of Object.entries(data)) {\r\n      dataDict[key] = value\r\n    }\r\n  let searchResults = dataDict.SearchResult.SearchResultItems\r\n  searchResults.forEach(element => {\r\n      let dict = {}\r\n      dict['positionTitle'] = element.MatchedObjectDescriptor.PositionTitle\r\n      dict['applyUrl'] = element.MatchedObjectDescriptor.PositionURI\r\n      if(element.MatchedObjectDescriptor.PositionLocation[0] !== undefined) {\r\n        dict['cityName'] = element.MatchedObjectDescriptor.PositionLocation[0]['CityName']\r\n        dict['locations'] =  element.MatchedObjectDescriptor.PositionLocation[0]['CountrySubDivisionCode']\r\n      }\r\n      dict['remuneration'] = element.MatchedObjectDescriptor.PositionRemuneration[0]\r\n      dict['jobType'] = element.MatchedObjectDescriptor.PositionSchedule[0]['Code']\r\n      dict['CloseDate'] = element.MatchedObjectDescriptor.ApplicationCloseDate\r\n      dict['hiringPath'] = element.MatchedObjectDescriptor.UserArea.Details.HiringPath\r\n      dict['summary']=element.MatchedObjectDescriptor.UserArea.Details.JobSummary\r\n      dict['duties']=element.MatchedObjectDescriptor.UserArea.Details.MajorDuties\r\n      \r\n      jobs.push(dict)\r\n  });\r\nreturn jobs\r\n}","/* This function takes the data from highcharts maps API using axios and then returns it.*/\r\nimport axios from \"axios\";\r\n\r\nfunction  mapData(extension) {\r\n    let baseUrl = \"https://code.highcharts.com/mapdata/\";\r\n    return axios.get(baseUrl + extension);\r\n}\r\n\r\nexport default mapData;","/*\r\nThis function ShowTableData displays all the data for \r\n1. names of states\r\n2. count of jobs in each state \r\n3. minimum and maximum remuneration of each state\r\n\r\nHere the data is got from usajobs API and from app.js the required jobs array is returned.\r\nFrom the returned data the count of jobs is calculate grouping by states.\r\nThe maximum and minimum remuneration state wise is calculated.\r\n*/\r\nimport React from \"react\";\r\n    \r\nfunction ShowTableData(props) {\r\n    const renderJobsData = () => {\r\n        if(props.jobdata) {\r\n            let data = props.jobdata;\r\n            let jobsCountArray = []\r\n            data.forEach(element => {\r\n                    let dict = {}\r\n                    dict['countryCode'] = element.locations\r\n                    let maxRem = parseFloat(element.remuneration.MaximumRange)\r\n                    let minRem = parseFloat(element.remuneration.MinimumRange)\r\n                    if(element.remuneration.RateIntervalCode === \"Per Hour\") {\r\n                        minRem = minRem*8*30*12\r\n                        maxRem = maxRem*8*30*12\r\n                    }\r\n                    dict['minRem'] = Math.floor(minRem)\r\n                    dict['maxRem'] = Math.floor(maxRem)\r\n                    \r\n                    jobsCountArray.push(dict)\r\n            });\r\n            \r\n            const groupBy = (array, key) => {\r\n                return array.reduce((result, currentValue) => {\r\n                  (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n                    currentValue\r\n                  );\r\n                  return result;\r\n                }, {});\r\n              };\r\n              \r\n            const groupByCity = groupBy(jobsCountArray, 'countryCode');\r\n            let finalArr = []\r\n            for(const [key,value] of Object.entries(groupByCity)) {\r\n                let min = 1000000, max = 0\r\n                value.forEach(elem => {\r\n                    if(min > elem.minRem) {\r\n                        min = elem.minRem\r\n                    }\r\n                    if(max < elem.maxRem) {\r\n                        max = elem.maxRem\r\n                    }\r\n                });\r\n                let dict = {}\r\n                dict['state'] = key\r\n                dict['jobCount'] = value.length\r\n                dict['minRem'] = min\r\n                dict['maxRem'] = max\r\n                finalArr.push(dict)\r\n            }\r\n            finalArr.sort((a, b) => (a.state > b.state) ? 1 : -1)\r\n            const rows = finalArr.map((elem) => {\r\n                return(\r\n                    <tr className=\"tbRows\">\r\n                        <td className=\"tbCol\">{elem.state}</td>\r\n                        <td className=\"tbCol\">{elem.jobCount}</td>\r\n                        <td className=\"tbCol\">{elem.minRem}</td>\r\n                        <td className=\"tbCol\">{elem.maxRem}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n            return rows\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {props.jobdata && (<table class = \"place\">\r\n            <thead>\r\n                <tr className=\"tbRows\">\r\n                    <th className=\"tbCol\">State</th>\r\n                    <th className=\"tbCol\">Number of Jobs</th>\r\n                    <th className=\"tbCol\">Minimum Salary</th>\r\n                    <th className=\"tbCol\">Maximum Salary</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>{renderJobsData()}</tbody>\r\n        </table>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowTableData;\r\n","import React from \"react\";\r\nimport { Line, Pie } from \"react-chartjs-2\";\r\n\r\nconst styles = {\r\n  height: \"600px\",\r\n  width: \"600px\"\r\n}\r\n\r\n/* Function LineChart returns the Line chart which compares the minimum and maximum \r\n   remuneration of job based of the each states.\r\n   The data is taken from USAjobs API and the required array is obtained from app.js */\r\n\r\nexport default function LineChart(props) {\r\n  const renderJobsData = () => {\r\n    if(props.jobdata) {\r\n      let stateArray=[]\r\n      let minArray=[]\r\n      let maxArray=[]\r\n      props.jobdata.forEach(element => {\r\n        stateArray.push(element.state)\r\n        minArray.push(element.minRem)\r\n        maxArray.push(element.maxRem)\r\n      });\r\n    \r\n    \r\n    const data = {\r\n\r\n      \r\n        labels: stateArray,\r\n        datasets: [\r\n          {\r\n            label: \"Max Salary\",\r\n            data: maxArray,\r\n            fill: false,\r\n            backgroundColor: \"rgb(252, 70, 26)\",\r\n            borderColor: \"rgba(252, 70, 26, 0.5)\",\r\n            \r\n          },\r\n          {\r\n            label: \"Min Salary\",\r\n            data: minArray,\r\n            fill: false,\r\n            backgroundColor: \"rgb(0, 109, 140)\",\r\n      borderColor: \"rgba(0, 109, 140, 0.5)\",\r\n          }\r\n        ]\r\n      };\r\n      const legend = {\r\n        display: true,\r\n        position: 'bottom',\r\n        labels: {\r\n          fontColor: \"#323130\",\r\n          fontSize: 14,\r\n        },\r\n    };\r\n    const options = {\r\n      legend: {\r\n        labels: {\r\n          fontColor:'blue'\r\n        }\r\n      },\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                autoSkip: false,\r\n                maxRotation: 180,\r\n                minRotation: 180\r\n              }\r\n            }\r\n          ],\r\n        },\r\n        tooltips: {\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      };\r\n    \r\n      return (\r\n        <Line  data={data} legend={legend} options={options} width={500} height={500} ></Line>\r\n      );}}\r\n      \r\n      return <div class = \"col-md-6\" style={styles}> {renderJobsData()} </div>\r\n\r\n  }\r\n","import React from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nlet backgroundColors = [\r\n  \"rgba(54, 162, 235, 0.8)\",\r\n  \"rgba(255, 206, 86, 0.8)\",\r\n  \"rgba(255, 99, 132, 0.8)\",\r\n  \"rgba(75, 192, 192, 0.8)\",\r\n  \"rgba(153, 102, 255, 0.8)\",\r\n  \"rgba(255, 159, 64, 0.8)\",\r\n  \"rgba(199, 199, 199, 0.8)\",\r\n  \"rgba(83, 102, 255, 0.8)\",\r\n  \"rgba(40, 159, 64, 0.8)\",\r\n  \"rgba(210, 199, 199, 0.8)\"\r\n];\r\n\r\nlet borderColors = [\r\n  \"rgba(54, 162, 235, 1)\",\r\n  \"rgba(255, 206, 86, 1)\",\r\n  \"rgba(255, 99, 132, 1)\",\r\n  \"rgba(75, 192, 192, 1)\",\r\n  \"rgba(153, 102, 255, 1)\",\r\n  \"rgba(255, 159, 64, 1)\",\r\n  \"rgba(159, 159, 159, 1)\",\r\n  \"rgba(83, 102, 255, 1)\",\r\n  \"rgba(40, 159, 64, 1)\",\r\n  \"rgba(210, 199, 199, 1)\"\r\n];\r\n\r\nconst legend = {\r\n  display: true,\r\n  position: 'bottom',\r\n  labels: {\r\n    fontColor: \"#323130\",\r\n    fontSize: 14\r\n  }\r\n};\r\n\r\nconst options = {\r\n  title: {\r\n    display: true\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n};\r\n\r\nconst styles = {\r\n  height: \"500px\",\r\n  width: \"500px\"\r\n}\r\n\r\n/* Function Houses returns the Pie chart which shows the job fields according \r\n   to the numbers in the USA \r\n   The data is taken from USAjobs API and the required array is obtained from app.js */\r\nexport default function Houses(props) {\r\n  const renderFieldData = () =>{\r\n    if(props.jobdata) {\r\n\r\n      let fieldCountArray=[]\r\n      let fieldNameArray=[]\r\n      props.jobdata.forEach(element => {\r\n        fieldCountArray.push(element.Field1)\r\n        fieldCountArray.push(element.Field2)\r\n        fieldCountArray.push(element.Field3)\r\n        fieldCountArray.push(element.Field4)\r\n        fieldCountArray.push(element.Field5)\r\n        fieldCountArray.push(element.Field6)\r\n        fieldCountArray.push(element.Field7)\r\n        fieldCountArray.push(element.Field8)\r\n\r\n\r\n        fieldNameArray.push(element.FieldName1)\r\n        fieldNameArray.push(element.FieldName2)\r\n        fieldNameArray.push(element.FieldName3)\r\n        fieldNameArray.push(element.FieldName4)\r\n        fieldNameArray.push(element.FieldName5)\r\n        fieldNameArray.push(element.FieldName6)\r\n        fieldNameArray.push(element.FieldName7)\r\n        fieldNameArray.push(element.FieldName8)\r\n        \r\n\r\n      });\r\n\r\n\r\n    const data = {\r\n      labels: fieldNameArray,\r\n      datasets: [\r\n        {\r\n          data: fieldCountArray,\r\n          backgroundColor: backgroundColors,\r\n          borderColor: borderColors,\r\n          borderWidth: 1\r\n        }\r\n      ]\r\n    };\r\n  \r\n    return (\r\n      <Pie data={data} legend={legend} options={options} height = {500} width = {500}/>\r\n    );\r\n    \r\n\r\n  }\r\n  \r\n  \r\n}\r\nreturn <div class = \"col-md-6\"style={styles}> {renderFieldData()} </div>\r\n}\r\n","import './JobTime.css';\r\nimport React from \"react\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n  \r\nconst styles = {\r\n  height:'600px',\r\n  width: '600px'\r\n}\r\n\r\n/**\r\n * Fields()\r\n * This function is used to export a bar graph \r\n * based on Job timings.\r\n * param {*} props \r\n * returns Bar Component\r\n */\r\nfunction Fields(props) {\r\n  const options = {\r\n    legend: {\r\n      align: \"bottom\",\r\n      display: true,\r\n      position: \"bottom\",\r\n      labels: {\r\n        fontColor: \"#fff\",\r\n        fontSize: 28\r\n      }\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          stacked: true,\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n    tooltips: {\r\n      mode: \"label\",\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n  const legend = {\r\n    display: true,\r\n    position: \"bottom\",\r\n    labels: {\r\n      fontColor: \"#323130\",\r\n      fontSize: 28,\r\n    },\r\n}\r\n\r\n  /**\r\n   * displayJobTime()\r\n   * This function receives Job type data from app.js,\r\n   * using props, saves data as state and count of part time\r\n   * jobs and full time jobs, and displays in Bar graph\r\n   * returns Bar Graph\r\n   */\r\n  const displayJobTime = () => {\r\n    if(props.jobTypeData) {\r\n      let stateData = props.jobTypeData\r\n      \r\n      const stateName=[]\r\n      const FTcount=[]\r\n      const PTcount=[]\r\n      for(let i=0; i<stateData.length; i++){\r\n        stateName.push(stateData[i].state)\r\n        FTcount.push(stateData[i].FullTime)\r\n        PTcount.push(stateData[i].PartTime)\r\n      }\r\n      const data = {\r\n          labels: stateName,\r\n          datasets: [\r\n            {\r\n              label: \"Full Time\",\r\n              data: FTcount,\r\n              fill: false,\r\n              backgroundColor: \"magenta\",\r\n              borderColor: \"red\",\r\n              \r\n            },\r\n            {\r\n              label: \"Part Time\",\r\n              data: PTcount,\r\n              fill: false,\r\n              backgroundColor: \"green\",\r\n              borderColor: \"pink\",\r\n              \r\n            }\r\n          ]\r\n      }\r\n      return(<div><Bar  className=\"PartFullDiv\" data={data} options={options} legend={legend} width={500} height={500}\r\n      ></Bar></div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div class = \"col-md-6\" style = {styles}>\r\n      {displayJobTime()}\r\n    </div>\r\n  );\r\n}\r\nexport default Fields;","/* This function is to display the state data table when a user clicks on State wide data tab.\r\nThis table has a data of state name along with the count of jobs in each state.\r\nWhen a row of the table is clicked then jobs in that particular clicked city of state is displayed.\r\nHere the job title and application close date of the job are displayed.\r\nThe statewide data is got grouped by states from App.js and the data here is used for displaying.\r\n*/\r\nimport React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"bootstrap/js/src/collapse.js\";\r\nimport \"./StateData.css\"\r\n\r\nfunction StateData(props) {\r\n    const displayStateData = () => {\r\n            const renderStateData = () => {\r\n                if(props.citiesData) {\r\n                    const results = () => {\r\n                    let res = []\r\n                    let index = 0\r\n                    for(const [key,value] of Object.entries(props.citiesData)) {\r\n                        let valueDiv = []\r\n                        index++ \r\n                        let className = \".multi-collapse\"+index\r\n                        let className1 = \"collapse multi-collapse\"+index\r\n                        let controls = \".multiCollapseExample\"+index\r\n                        value.forEach((elem) => {\r\n                            const title = elem['positionTitle']\r\n                            const date = elem['CloseDate']\r\n                            valueDiv.push(\r\n                                <tr className=\"cityRows\"><td className=\"cityCol\">{title}</td><td className=\"cityCol\">{date}</td></tr>)\r\n                        })    \r\n                          res.push(<tr\r\n                            data-toggle=\"collapse\"\r\n                            data-target={className}\r\n                            aria-controls={controls}>\r\n                            <td>{key} </td>\r\n                            <td>{value.length}</td>\r\n                            </tr>\r\n                            )\r\n                    res.push(<div class= {className1} id={controls}><table class = \"styles\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Title</th>\r\n                            <th>Application Close Date</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{valueDiv}</tbody>\r\n                    </table></div>)\r\n                }   \r\n                    return res;\r\n                    }\r\n                    let arr = [<thead><tr id = 't01'>\r\n                    <th>Name Of The City</th>\r\n                    <th>Number Of Jobs </th>\r\n                </tr></thead>]\r\n                arr.push(<tbody>{results()}</tbody>)\r\n                    return arr\r\n                         \r\n                }               \r\n        }\r\n            return(\r\n            renderStateData()\r\n        )\r\n    }\r\n    return (\r\n            <table class = \"styles \">\r\n                {displayStateData()}\r\n            </table>\r\n    )\r\n}\r\n    \r\nexport default StateData;","/*This function creates filter for state search which has all the names of states as input and then \r\nexports a select dropdown along with names of states.*/\r\nfunction FilterForStateMaps(props) {\r\n    const renderFilteredData = () => {\r\n        if(props.statedata) {\r\n            const filterRows = props.statedata.map((elem) => {\r\n                return <option value = {elem}>{elem}</option>\r\n            })\r\n        return filterRows\r\n    }\r\n}\r\n    return (\r\n    <div class = \"stateLabelPadding\">\r\n        <label for=\"dropdown\" class = \"stateLabelPadding\">Select State :</label>\r\n        <select id = \"dropdown\" onChange = {(e) => props.setFilterData(e.target.value)}>{renderFilteredData()}\r\n        </select>\r\n    </div>\r\n    )\r\n}\r\nexport default FilterForStateMaps","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nlet backgroundColors = [\r\n  \"rgba(54, 162, 235, 0.8)\",\r\n  \"rgba(255, 206, 86, 0.8)\",\r\n  \"rgba(255, 99, 132, 0.8)\",\r\n  \"rgba(75, 192, 192, 0.8)\",\r\n  \"rgba(153, 102, 255, 0.8)\",\r\n  \"rgba(255, 159, 64, 0.8)\",\r\n  \"rgba(199, 199, 199, 0.8)\",\r\n  \"rgba(83, 102, 255, 0.8)\",\r\n  \"rgba(40, 159, 64, 0.8)\",\r\n  \"rgba(210, 199, 199, 0.8)\"\r\n];\r\n\r\nlet borderColors = [\r\n  \"rgba(54, 162, 235, 1)\",\r\n  \"rgba(255, 206, 86, 1)\",\r\n  \"rgba(255, 99, 132, 1)\",\r\n  \"rgba(75, 192, 192, 1)\",\r\n  \"rgba(153, 102, 255, 1)\",\r\n  \"rgba(255, 159, 64, 1)\",\r\n  \"rgba(159, 159, 159, 1)\",\r\n  \"rgba(83, 102, 255, 1)\",\r\n  \"rgba(40, 159, 64, 1)\",\r\n  \"rgba(210, 199, 199, 1)\"\r\n];\r\n\r\nconst legend = {\r\n  display: true,\r\n  position: \"bottom\",\r\n  labels: {\r\n    fontColor: \"#323130\",\r\n    fontSize: 14\r\n  }\r\n};\r\n\r\nconst options = {\r\n  title: {\r\n    display: true\r\n  },\r\n  maintainAspectRatio: false\r\n};\r\n\r\nconst styles = {\r\n  height: \"450px\",\r\n  width: \"450px\",\r\n}\r\n\r\n/* Function StateChart returns the Donut chart which shows the job numbers \r\n   according to the cities of the selected State \r\n   The data is taken from USAjobs API and the required array is obtained from app.js */\r\n\r\nexport default function StateChart(props) {\r\n    const prepareChart = () => {\r\n        \r\n        if(props) {\r\n            console.log(props)\r\n            const data = {\r\n                labels: props.citiesData,\r\n                datasets: [\r\n                  {\r\n                    data: props.jobCount,\r\n                    backgroundColor: backgroundColors,\r\n                    borderColor: borderColors,\r\n                    borderWidth: 1\r\n                  }\r\n                ]\r\n              };\r\n              return (\r\n                <Doughnut data={data} legend={legend} options={options} style={styles}/>\r\n            )\r\n        }\r\n    }\r\n    \r\n  return (\r\n    <div style={styles} className=\"container stateChart\" id=\"stateDoughnut\">\r\n      {prepareChart()}\r\n    </div>\r\n  );\r\n}\r\n","import './publicJobs.css';\r\nimport React from \"react\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n  \r\nconst styles = {\r\n  height:'600px',\r\n  width: '600px'\r\n}\r\n\r\n/**\r\n * PublicJobs()\r\n * This function takes input from hiringPath data,\r\n * sent from the app.js using props, and store data \r\n * as state and respective count of total number \r\n * of public hiring jobs and display Bar Graph \r\n * param {*} props \r\n * returns Bar component\r\n */\r\nfunction PublicJobs(props) {\r\n  const options = {\r\n    legend: {\r\n      align: \"bottom\",\r\n      display: true,\r\n      position: \"bottom\",\r\n      labels: {\r\n        fontColor: \"#ffffff\",\r\n        fontSize: 28\r\n      }\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n           gridLines: {\r\n              display: false\r\n           }\r\n        }],\r\n        yAxes: [{\r\n           gridLines: {\r\n              display: false\r\n           }\r\n        }]\r\n    },\r\n    tooltips: {\r\n      mode: \"label\",\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n  const legend = {\r\n    display: true,\r\n    position: \"bottom\",\r\n    labels: {\r\n      fontColor: \"#ffffff\",\r\n      fontSize: 28,\r\n    },\r\n}\r\n\r\n  const displayPublicJobs = () => {\r\n    if(props.hiringPaths) {\r\n      let stateData = props.hiringPaths\r\n      const stateName=[]\r\n      const Pcount=[]\r\n\r\n      for(let i=0; i<stateData.length; i++){\r\n        stateName.push(stateData[i].state)\r\n        Pcount.push(stateData[i].PublicJobs)\r\n      }\r\n      const data = {\r\n          labels: stateName,\r\n          datasets: [\r\n            {\r\n              label: \"Public Hiring Path\",\r\n              data: Pcount,\r\n              fill: false,\r\n              backgroundColor: \"aqua\",\r\n              borderColor: \"red\",\r\n              \r\n            }\r\n          ]\r\n      }\r\n      return(<Bar  className=\"PubJobDiv\" data={data} options={options} legend={legend} width={500} height={500}></Bar>\r\n      )\r\n      \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div class = \"col-md-6\" style = {styles}>\r\n      {displayPublicJobs()}\r\n    </div>\r\n  );\r\n}\r\nexport default PublicJobs;","import './search.css'\r\n\r\n/**\r\n * getSelectedValues() reads user entered values,\r\n * store them as key and value and return to serach tag.\r\n * param : {*} props \r\n * returns : filter values\r\n */\r\nfunction getSelectedValue(props) {\r\n    let filters = {}\r\n    let state = document.getElementById(\"statedd\").value;\r\n    let minSalary = document.getElementById(\"minsalary\").value;\r\n    let maxSalary = document.getElementById(\"maxsalary\").value;\r\n    let field = document.getElementById(\"fielddd\").value;\r\n    let partTime = document.getElementById(\"part-time\").value\r\n    let fullTime = document.getElementById(\"full-time\").value;\r\n\r\n    filters['state']=state;\r\n    if(state === \"None\"){\r\n        return alert(\"State required\")\r\n    }\r\n    if(field !== \"\"){\r\n        filters['field']=field;\r\n    }\r\n    if(minSalary !== \"\"){\r\n        filters['minSalary']=minSalary;\r\n    }\r\n    else\r\n    {\r\n        filters['minSalary']= 0 ;\r\n    }\r\n    if(maxSalary !== \"\") {\r\n        filters['maxSalary']=maxSalary;\r\n    }\r\n    else{\r\n        filters['maxSalary']= 100000000000000000;\r\n    }\r\n    if(document.getElementById(\"part-time\").checked)\r\n    {\r\n        filters['partTime'] = partTime;\r\n    }\r\n    if(document.getElementById(\"full-time\").checked)\r\n    {\r\n        filters['fullTime'] = fullTime;\r\n    }\r\n    \r\n    return filters;\r\n}\r\n\r\n/**\r\n * clearFilters()\r\n * reset button will call this function \r\n * and clear all user input values\r\n */\r\nfunction clearFilters() {\r\n    document.getElementById(\"statedd\").value = \"\";\r\n    document.getElementById(\"minsalary\").value = \"\";\r\n    document.getElementById(\"maxsalary\").value = \"\";\r\n    document.getElementById(\"fielddd\").value = \"\";\r\n    document.getElementById(\"part-time\").checked = false;\r\n    document.getElementById(\"full-time\").checked = false;\r\n}\r\n\r\n\r\n/**\r\n * FilterForSearch()\r\n * This function displays filters, \r\n * retrive state names, field values and display in dropdown,\r\n * user suppose to enter or select values and Apply filters.\r\n * param {*} props \r\n * returns state names\r\n */\r\nfunction FilterForSearch(props) {\r\n    const showStates = () => {\r\n        if(props.statedata) {\r\n            const states = props.statedata.map((elem) => {\r\n                return <option value = {elem}>{elem}</option>\r\n            })\r\n        return states\r\n    }\r\n}\r\n\r\n    return (\r\n    <div className=\"search container-fluid\">\r\n        <div className=\"row1 row\">\r\n        <div className=\"col-md\">\r\n                <label className=\"stateddlabel\" for=\"statedd\">State: </label>\r\n                <select className=\"\" id=\"statedd\" required>\r\n                    <option value=\"None\" selected></option>\r\n                    {showStates()}\r\n                </select>    \r\n        </div>\r\n        <div className=\"col-md\">\r\n            <label for=\"fielddd\">Field:</label>\r\n            <select id=\"fielddd\">\r\n                <option value=\"None\" selected></option>\r\n                <option value=\"Military Services\">Military Services</option>\r\n                <option value=\"Medical Services\" >Medical Services</option>\r\n                <option value=\"Finance and Accounting\" >Finance and Accounting</option>\r\n                <option value=\"Engineering\" >Engineering</option>\r\n                <option value=\"Food Industry\" >Food Industry</option>\r\n                <option value=\"Other Fields\" >Other Fields</option>\r\n            </select>\r\n        </div>\r\n        <div className=\"col-md\">\r\n            <label className=\"minsallabel\" for=\"minsalary\">Minimum Salary: </label>\r\n            <input type=\"number\" id=\"minsalary\" step=\"500\"/>\r\n        </div>\r\n        <div className=\"col-md\">\r\n            <label className=\"maxsallabel\" for=\"maxsalary\">Maximum Salary: </label>\r\n            <input type=\"number\" id=\"maxsalary\" step=\"500\"/>\r\n        </div>\r\n        <div className=\"jobTime col-md\">\r\n            <input type=\"checkbox\" id=\"full-time\" value=\"Full-Time\"/>\r\n            <label for=\"full-time\">Full-Time</label>\r\n        \r\n            <input type=\"checkbox\" id=\"part-time\" value=\"Part-Time\"/>\r\n            <label for=\"part-time\">Part-Time</label>\r\n        </div>    \r\n        <div className=\"btnBar col-md\">\r\n            <button id=\"applyBtn\" onClick={() => props.setSearchFilterData(getSelectedValue())}>Apply</button>\r\n            <button id=\"resetBtn\" onClick={clearFilters}>Clear</button>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FilterForSearch\r\n\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './search.css'\r\n\r\n/* Function showDetails displays the job's complete details \r\n   when the user clicks on the job row which is returned by function Search */\r\nfunction showDetails(elem){\r\n\r\n    document.querySelector(\"#ltitle\").textContent=\"Job Title : \"\r\n    document.querySelector(\"#lvtitle\").textContent=elem['positionTitle']\r\n\r\n    document.querySelector(\"#lcity\").textContent=\"Location : \"\r\n    document.querySelector(\"#lvcity\").textContent=elem['cityName']\r\n\r\n    document.querySelector(\"#lsummary\").textContent=\"Summary : \"\r\n    document.querySelector(\"#lvsummary\").textContent=elem['summary']\r\n\r\n    document.querySelector(\"#lduties\").textContent=\"Major Duties : \"\r\n    document.querySelector(\"#lvduties\").textContent=elem['duties']\r\n\r\n    document.querySelector(\"#ltime\").textContent=\"Job Time : \"\r\n    if(elem['jobType']===\"1\"){\r\n        document.querySelector(\"#lvtime\").textContent=\"Full Time\"\r\n    }\r\n    else{\r\n        document.querySelector(\"#lvtime\").textContent=\"Part Time\"\r\n    }\r\n\r\n    document.querySelector(\"#lsalary\").textContent=\"Salary : \"\r\n    document.querySelector(\"#lvsalary\").textContent=elem.remuneration.MinimumRange+\" - \"+elem.remuneration.MaximumRange\r\n\r\n    document.querySelector(\"#lcdate\").textContent=\"Apply Before Date : \"\r\n    document.querySelector(\"#lvcdate\").textContent=elem['CloseDate']\r\n\r\n    document.querySelector(\"#lurl\").textContent=\"Apply Here : \"\r\n    document.querySelector(\"#lvurl\").textContent=elem['applyUrl']\r\n    document.getElementById(\"lvurl\").href=elem['applyUrl']\r\n\r\n}\r\n\r\n/* Function Search displays the jobs which matches the filter inputs\r\n   These inputs are given by the user\r\n   This function also has error handling for the filters */ \r\n\r\nfunction Search(props) {\r\n    const displayStateData = () => {\r\n    if(props.jobData){\r\n    const filter = props.searchFilterData\r\n    const jobData = props.jobData\r\n    const filterNames=Object.keys(filter)\r\n\r\n    const searchList = []\r\n    \r\n    jobData.forEach(job => {\r\n        if((filter.state !== \"None\") && (job.locations === filter.state)){\r\n                  if(filterNames.includes(\"minSalary\")) { \r\n                    if(Number(job.remuneration.MinimumRange) >= Number(filter.minSalary)) {\r\n                        if(filterNames.includes(\"maxSalary\")){\r\n                            if(Number(job.remuneration.MaximumRange) <= Number(filter.maxSalary)){\r\n                                        if(filterNames.includes(\"field\")){\r\n                                            if(filter.field === \"Military Services\"){\r\n                                                if(job.positionTitle.includes(\"Military\")){\r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n\r\n                                                    \r\n                                                }\r\n                                            }  \r\n                                            else if(filter.field === \"Medical Services\"){\r\n                                                if(job.positionTitle.includes(\"Medicine\") || job.positionTitle.includes(\"Nurse\")){\r\n                                                    \r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n                                                }\r\n                                            }  \r\n                                            else if(filter.field === \"Finance and Accounting\"){\r\n                                                if(job.positionTitle.includes(\"Accounting\") || job.positionTitle.includes(\"Finance\") || job.positionTitle.includes(\"Financial\")){\r\n                                                    \r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                            else if(filter.field === \"Engineering\"){\r\n                                                if(job.positionTitle.includes(\"IT\") || job.positionTitle.includes(\"Engineer\") || job.positionTitle.includes(\"Engineering\") ){\r\n                                                    \r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                            else if(filter.field === \"Food Industry\"){\r\n                                                if(job.positionTitle.includes(\"Cook\") || job.positionTitle.includes(\"Food\")){\r\n                                                    \r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                            else if(filter.field === \"Other Fields\"){\r\n                                                if(job.positionTitle.includes(\"Cook\") || job.positionTitle.includes(\"Food\") || job.positionTitle.includes(\"IT\") || job.positionTitle.includes(\"Engineer\") || job.positionTitle.includes(\"Engineering\") || \r\n                                                job.positionTitle.includes(\"Accounting\") || job.positionTitle.includes(\"Finance\") || job.positionTitle.includes(\"Financial\") ||\r\n                                                job.positionTitle.includes(\"Medicine\") || job.positionTitle.includes(\"Nurse\") || job.positionTitle.includes(\"Military\")){\r\n                                                    \r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                        if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                            searchList.push(job);\r\n                                                        }\r\n                                                        if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                            searchList.push(job);\r\n                                                        } \r\n\r\n                                                    }\r\n                                                    else{\r\n                                                        searchList.push(job); \r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else{\r\n                                                if(filterNames.includes(\"fullTime\") || filterNames.includes(\"partTime\")){\r\n                                                    if((filterNames.includes(\"fullTime\")) && (job.jobType===\"1\")){\r\n                                                        searchList.push(job);\r\n                                                    }\r\n                                                    if(filterNames.includes(\"partTime\") && (job.jobType===\"2\")){\r\n                                                        searchList.push(job);\r\n                                                    } \r\n\r\n                                                }\r\n                                                else{\r\n                                                    searchList.push(job); \r\n                                                }\r\n                                            } \r\n\r\n                                         }            \r\n                                        \r\n                                  \r\n                                else\r\n                                {\r\n                                    searchList.push(job)\r\n                                                \r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        \r\n    });\r\n    \r\n    let valueDiv = []\r\n    searchList.forEach(elem => { \r\n        const title = elem['positionTitle']\r\n        const city = elem['cityName']\r\n        const date = elem['CloseDate']\r\n        const url = elem['applyUrl']\r\n        valueDiv.push(\r\n          <tr className=\"searchRows\" onClick={() => showDetails(elem)}><td className=\"searchCol\">{title}</td><td className=\"searchCol\">{city}</td><td className=\"searchCol\"><a href={url}>Apply Link</a></td><td className=\"searchCol\">{date}</td></tr>\r\n            )\r\n     \r\n    })\r\n    \r\n    return valueDiv\r\n    }\r\n}\r\n    \r\n                   \r\n\r\n    return(\r\n        <div className=\"tableDetails container-fluid\" >\r\n            <div className=\"row\">\r\n                <div className=\"searchTable col-md-4\">\r\n                    <table className = \"srTb\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th className=\"col\">Title</th>\r\n                            <th className=\"col\">City</th>\r\n                            <th className=\"col\">Apply Link</th>\r\n                            <th className=\"col\">Date</th>\r\n                            </tr>\r\n                        </thead>    \r\n                        <tbody className=\"displayed\" id=\"tableId\">{displayStateData()} </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"Details col-md-8 col-sm-12 col-xs-12\">\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"htitle\" id=\"ltitle\"></label>\r\n                            <label className=\"labelsV\" for=\"vtitle\" id=\"lvtitle\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hcity\" id=\"lcity\"></label>\r\n                            <label className=\"labelsV\" for=\"vcity\" id=\"lvcity\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"htime\" id=\"ltime\"></label>\r\n                            <label className=\"labelsV\" for=\"vtime\" id=\"lvtime\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hsalary\" id=\"lsalary\"></label>\r\n                            <label className=\"labelsV\" for=\"vsalary\" id=\"lvsalary\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hcdate\" id=\"lcdate\"></label>\r\n                            <label className=\"labelsV\" for=\"vcdate\" id=\"lvcdate\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hsummary\" id=\"lsummary\"></label>\r\n                            <label className=\"labelsV\" for=\"vsummary\" id=\"lvsummary\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hduties\" id=\"lduties\"></label>\r\n                            <label className=\"labelsV\" for=\"vsuties\" id=\"lvduties\"></label>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <label className=\"labelsK\" for=\"hurl\" id=\"lurl\"></label>\r\n                            <a className=\"labelsVurl\" for=\"vurl\" id=\"lvurl\"></a>\r\n                        </div>\r\n                    </div>               \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n\r\n","import './App.css';\r\nimport './charts.css';\r\nimport Map from \"./Components/Map.js\";\r\nimport jobsData from \"./API/jobsData\"\r\nimport { useEffect, useState } from 'react';\r\nimport mapData from './API/mapData';\r\nimport ShowTableData from \"./Components/showTableData\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport LineChart from \"./Components/Chart2\";\r\nimport Houses from \"./Components/Chart1\";\r\nimport Fields from \"./Components/statistics\";\r\nimport StateData from \"./Components/StateData\"; \r\nimport FilterForStateMaps from \"./Components/FilterForStateMaps\"\r\nimport Donut from \"./Components/DonutChart\"\r\nimport PublicJobs from \"./Components/publicJobs\"\r\nimport FilterForSearch from \"./Components/FilterForSearch\"\r\nimport Search from \"./Components/search\"\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction App() {\r\n  //Taking all the constants to store data\r\n  const [jobData,setJobsData] = useState()\r\n  const [mapsData,setMapsData] = useState()\r\n  const [jobTypeData, setJobTypeData] = useState()\r\n\r\n  const [allStatesData, setAllStatesData] = useState()\r\n  const [filterData,setFilterData] = useState()\r\n  const [groupedByStates,setGroupedByStates] = useState()\r\n  const [groupedByCities, setGroupByCities] = useState()\r\n  const [selectedStateCityName, setselectedStateCityNames] = useState()\r\n  const [selectedStateCityJobs,setselectedStateCityJobs] = useState()\r\n\r\n  const [remunerationData, setRemunerationData] = useState()\r\n  const [fieldData1, setFieldData1] = useState()\r\n  \r\n  const [hiringPaths, setHiringPaths] = useState()\r\n\r\n  const [searchFilterData,setSearchFilterData] = useState()\r\n\r\n\r\n  useEffect( () => {\r\n    /* This function is to get the job data from jobsData.js as an array*/\r\n    const getJobsData = async () => {\r\n      const data1 = await jobsData('Page=1&ResultsPerPage=1000')\r\n      const data2 = await jobsData('Page=2&ResultsPerPage=1000')\r\n      const data3 = await jobsData('Page=3&ResultsPerPage=1000')\r\n      let res = data1.concat(data2,data3)\r\n      setJobsData(res)\r\n    }\r\n    getJobsData()\r\n  },[])\r\n\r\n  useEffect( () => {\r\n    /*This function is to get remunerations from all the jobs based on states. \r\n    This function returns a dictionary of state name, minimum remuneration and maximum remuneration.*/\r\n    const getRemunerations = async () => {\r\n      let jobsCountArray = []\r\n      if (jobData){\r\n      jobData.forEach(element => {\r\n        let dict = {}\r\n        \r\n        dict['countryCode'] = element.locations\r\n        let maxRem = parseFloat(element.remuneration.MaximumRange)\r\n        let minRem = parseFloat(element.remuneration.MinimumRange)\r\n        if(element.remuneration.RateIntervalCode === \"Per Hour\") {\r\n            minRem = minRem*8*30*12\r\n            maxRem = maxRem*8*30*12\r\n        }\r\n        dict['minRem'] = Math.floor(minRem)\r\n        dict['maxRem'] = Math.floor(maxRem)\r\n        jobsCountArray.push(dict)\r\n      });\r\n\r\n    const groupBy = (array, key) => {\r\n    return array.reduce((result, currentValue) => {\r\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n        currentValue\r\n      );\r\n      return result;\r\n    }, {});\r\n  };\r\n  \r\n  const groupByCity = groupBy(jobsCountArray, 'countryCode');\r\n  let finalArr = []\r\n  for(const [key,value] of Object.entries(groupByCity)) {\r\n    let min = 1000000, max = 0\r\n    value.forEach(elem => {\r\n        if(min > elem.minRem) {\r\n            min = elem.minRem\r\n        }\r\n        if(max < elem.maxRem) {\r\n            max = elem.maxRem\r\n        }\r\n    });\r\n    let dict = {}\r\n    dict['state'] = key\r\n    dict['minRem'] = min\r\n    dict['maxRem'] = max\r\n    finalArr.push(dict)\r\n\r\n      }\r\n      setRemunerationData(finalArr)\r\n    }}\r\n    getRemunerations()\r\n\r\n  },[jobData])\r\n\r\n  \r\n  useEffect( () => {\r\n    /* This function is to get data according to the fields.\r\n    Here each field is mapped with a count of number of jobs available in that field and is returned as\r\n    an array.*/\r\n    const getFieldData = async () => {\r\n      if(jobData) {\r\n        const groupBy = (array, key) => {\r\n          return array.reduce((result, currentValue) => {\r\n            (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n              currentValue\r\n            );\r\n            return result;\r\n          }, {});\r\n        };\r\n        \r\n        let result = []\r\n        let fieldfilter = []\r\n          let i=0\r\n          let dict = {}\r\n          \r\n          let count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0, count6 = 0, count7 = 0, count8 = 0, count9 = 0, count10 = 0\r\n          jobData.forEach(element => {\r\n              if(element.positionTitle.includes(\"Military\")) {\r\n                count1 = count1 + 1  \r\n                \r\n              }\r\n              if(element.positionTitle.includes(\"Medicine\") || element.positionTitle.includes(\"Nurse\")) {\r\n                count2 = count2 + 1\r\n              }\r\n              if(element.positionTitle.includes(\"Accounting\") || element.positionTitle.includes(\"Finance\") || element.positionTitle.includes(\"Financial\")) {\r\n                count3 = count3 + 1\r\n              }\r\n              if(element.positionTitle.includes(\"IT\") || element.positionTitle.includes(\"Engineer\") || element.positionTitle.includes(\"Engineering\") ) {\r\n                count4 = count4 + 1\r\n              }\r\n              if(element.positionTitle.includes(\"Cook\") || element.positionTitle.includes(\"Food\")) {\r\n                count5 = count5 + 1\r\n              }\r\n              if(element.positionTitle.includes(\"Attorney\") || element.positionTitle.includes(\"Law\")) {\r\n                count6 = count6 + 1\r\n              }\r\n              if(element.positionTitle.includes(\"Teach\")) {\r\n                count7 = count7 + 1  \r\n              }\r\n              if(element.positionTitle.includes(\"Social Worker\") || element.positionTitle.includes(\"Counselling\")) {\r\n                count8 = count8 + 1  \r\n              }\r\n              \r\n          });\r\n         \r\n          dict['Field1'] = count1\r\n          dict['Field2'] = count2\r\n          dict['Field3'] = count3\r\n          dict['Field4'] = count4\r\n          dict['Field5'] = count5\r\n          dict['Field6'] = count6\r\n          dict['Field7'] = count7\r\n          dict['Field8'] = count8\r\n          if(count1 > 0 )\r\n          {\r\n            dict['FieldName1'] = \"Military Services\"\r\n          }\r\n          if(count2 > 0 )\r\n          {\r\n            dict['FieldName2'] = \"Medical Services\"\r\n          }\r\n          if(count3 > 0 )\r\n          {\r\n            dict['FieldName3'] = \"Finance & Accounting\"\r\n          }\r\n          if(count4 > 0 )\r\n          {\r\n            dict['FieldName4'] = \"Engineering\"\r\n          }\r\n          if(count5 > 0 )\r\n          {\r\n            dict['FieldName5'] = \"Food Industry\"\r\n          }\r\n          if(count6 > 0 )\r\n          {\r\n            dict['FieldName6'] = \"Law & Justice\"\r\n          }\r\n          if(count7 > 0 )\r\n          {\r\n            dict['FieldName7'] = \"Teaching\"\r\n          }\r\n          if(count8 > 0 )\r\n          {\r\n            dict['FieldName8'] = \"Social Work\"\r\n          }\r\n          \r\n          result.push(dict)\r\n        \r\n        setFieldData1(result)\r\n      }\r\n    }\r\n    getFieldData()\r\n  },[jobData])\r\n    \r\n  useEffect( () => {\r\n    /* This function is to get job by type either full time or part-time.\r\n    Here the dictionary of statename, count of full-time and part-time jobs in that state are returned.*/\r\n    const getJobsByType = async () => {\r\n      if(jobData) {\r\n        const groupBy = (array, key) => {\r\n          return array.reduce((result, currentValue) => {\r\n            (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n              currentValue\r\n            );\r\n            return result;\r\n          }, {});\r\n        };\r\n        const groupByCity = groupBy(jobData, 'locations');\r\n        let result = []\r\n        for(const [a,b] of Object.entries(groupByCity)) {\r\n          let dict = {}\r\n            dict['state'] = a\r\n          let count1 = 0, count2 = 0\r\n          b.forEach(element => {\r\n              if(element.jobType === \"1\") {\r\n                count1 = count1 + 1\r\n              }\r\n              if(element.jobType === '2') {\r\n                count2 = count2 + 1\r\n              }\r\n          });\r\n          dict['FullTime'] = count1\r\n          dict['PartTime'] = count2\r\n          result.push(dict)\r\n        }\r\n        setJobTypeData(result)\r\n      }\r\n    }\r\n    getJobsByType()\r\n  },[jobData])\r\n  \r\n  useEffect( () => {\r\n    /* This function is to take mapsdata from API maps and \r\n    *  then store it in maps data using set state.*/\r\n    const getMapsData = async () => {\r\n      const data = await mapData(\"countries/us/us-all.geo.json\")\r\n      setMapsData(data)\r\n    }\r\n    getMapsData()\r\n  },[])\r\n\r\n  useEffect( () => {\r\n    /**\r\n     *This function works on all data and \r\n     * store count of public hiring path jobs per state.\r\n     */\r\n    const getHiringPaths = async () => {\r\n      if(jobData){\r\n        const groupBy = (array, key) => {\r\n          return array.reduce((result, currentValue) => {\r\n            (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n              currentValue\r\n            );\r\n            return result;\r\n          }, {});\r\n        };\r\n        const groupByState = groupBy(jobData, 'locations');\r\n        let stateHiringPaths = []\r\n        let pubCount=0\r\n        for(const [state,hp] of Object.entries(groupByState)) {\r\n          let shp = {}\r\n          shp['state'] = state      \r\n            hp.forEach(elem => {\r\n              elem.hiringPath.forEach(hp => {\r\n                if(hp==='public'){\r\n                  pubCount=pubCount+1\r\n                }\r\n              })\r\n            });\r\n          //}\r\n          shp['PublicJobs']  = pubCount\r\n          stateHiringPaths.push(shp)\r\n        }\r\n        setHiringPaths(stateHiringPaths)\r\n      }\r\n    }\r\n    getHiringPaths()\r\n  },[jobData])\r\n  \r\n  useEffect( () => {\r\n    /* This function gets all data from Maps and stores state names.*/\r\n    const allStatesInfo = async () => {\r\n      if(mapsData) {\r\n        let data = mapsData.data\r\n        let statesData = []\r\n        data.features.forEach(element => {\r\n          statesData.push(element.properties['name'])\r\n        });\r\n        setAllStatesData(statesData)\r\n      }\r\n    }\r\n    allStatesInfo()\r\n  },[mapsData])\r\n  \r\n  useEffect( () => {\r\n    /*\r\n    *This function works on all data \r\n    * and group available jobs by state names. \r\n    */\r\n    const groupByStates = () => {\r\n      if(jobData) {\r\n        const groupBy = (array, key) => {\r\n          return array.reduce((result, currentValue) => {\r\n            (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n              currentValue\r\n            );\r\n            return result;\r\n          }, {});\r\n        };\r\n        const byStates = groupBy(jobData, 'locations');\r\n        setGroupedByStates(byStates)\r\n      }\r\n    }\r\n    groupByStates()\r\n  },[jobData])\r\n\r\n  useEffect( () => {\r\n    /*\r\n    *This function works on a data which is grouped by state\r\n    * and sort jobs by city names, and available jobs per city.\r\n    */\r\n    const sortElementsByCity = () => {\r\n      if(groupedByStates && filterData) {\r\n        const jobs = groupedByStates[filterData]\r\n        jobs.forEach(element => {\r\n          let city = element.cityName.split(',')\r\n          element.cityName = city[0]\r\n        });  \r\n        const groupBy = (array, key) => {\r\n          return array.reduce((result, currentValue) => {\r\n            (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n              currentValue\r\n            );\r\n            return result;\r\n          }, {});   \r\n        }\r\n        let byCities = groupBy(jobs,'cityName')    \r\n        let cityNames = []\r\n        let jobCountPerCity = []  \r\n        for(const [key,value] of Object.entries(byCities)) {\r\n          cityNames.push(key)\r\n          jobCountPerCity.push(value.length)\r\n        }\r\n        setselectedStateCityJobs(jobCountPerCity)\r\n        setselectedStateCityNames(cityNames)  \r\n        setGroupByCities(byCities)\r\n    }\r\n  }\r\n    sortElementsByCity()\r\n  },[groupedByStates,filterData])\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark \">\r\n      <a class=\"navbar-brand inactiveLink\"><h1 className=\"links\">JOBS DASHBOARD</h1></a>\r\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsingNavbarMd\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div class=\"navbar-collapse collapse\" id=\"collapsingNavbarMd\">\r\n        <ul class=\"navbar-nav\">\r\n          <li class=\"nav-item\">\r\n              <Link to=\"/home\"><h4 className=\"links\">NATION WIDE JOBS DATA</h4></Link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <Link to=\"/stateMaps\"><h4 className=\"links\">STATE WIDE JOBS DATA</h4></Link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <Link to=\"/search\"><h4 className=\"links\">SEARCH</h4></Link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <Link to=\"/statistics\"><h4 className=\"links\">STATISTICS</h4></Link>\r\n          </li>\r\n      </ul>\r\n  </div>\r\n</nav>\r\n<Switch>\r\n        <Route path=\"/search\">\r\n          <div>\r\n            <FilterForSearch setSearchFilterData={(allfilters) => setSearchFilterData(allfilters)} statedata={allStatesData}/>\r\n          </div>\r\n            <div>\r\n            {(!jobData) && (\r\n            <div class = \"loaderProperties\">\r\n            <Loader type=\"Grid\" color=\"#00BFFF\" height={75} width={75} ></Loader> \r\n                </div>)}\r\n            {searchFilterData && (\r\n            <Search searchFilterData={searchFilterData} jobData={jobData}></Search>\r\n          )}\r\n          </div>\r\n        </Route>\r\n        <Route path = \"/stateMaps\">\r\n          <div class = \"container-fluid\">\r\n          <div class = \"row\">\r\n            <FilterForStateMaps setFilterData = {(fd) => setFilterData(fd)} statedata = {allStatesData}></FilterForStateMaps>\r\n          </div>\r\n          {(!jobData) && (\r\n            <div class = \"loaderProperties\">\r\n            <Loader type=\"Grid\" color=\"#00BFFF\" height={75} width={75} ></Loader> \r\n                </div>)}\r\n          <div class = \"row\">\r\n            <div class = \"col-md-6 donutprops\">\r\n              {(filterData && selectedStateCityName) && (\r\n                <Donut citiesData = {selectedStateCityName} jobCount = {selectedStateCityJobs}>\r\n                </Donut>)}\r\n            </div>\r\n            <div class = 'col-md-6' style={{alignContent:'center'}}>\r\n            {filterData && (\r\n            <StateData citiesData = {groupedByCities}></StateData>\r\n          )}\r\n            </div>\r\n          </div>\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/statistics\">\r\n          <div class=\"row\">\r\n          {(!jobTypeData) && (\r\n            <div class = \"loaderProperties\">\r\n            <Loader type=\"Grid\" color=\"#00BFFF\" height={75} width={75} ></Loader> \r\n                </div>)}\r\n            <Houses jobdata = {fieldData1} typedata = {jobTypeData}></Houses>\r\n            <LineChart jobdata = {remunerationData} typedata = {jobTypeData}> </LineChart>\r\n            <Fields jobTypeData={jobTypeData}></Fields>\r\n            <PublicJobs hiringPaths={hiringPaths}></PublicJobs>\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/home\">\r\n          <div class = \"container-fluid\">\r\n            <div class = \"row\">\r\n            {(!jobData) && (\r\n            <div class = \"loaderProperties\">\r\n            <Loader type=\"Grid\" color=\"#00BFFF\" height={75} width={75} ></Loader> \r\n                </div>)}\r\n              <div class = \"col-md-7\">\r\n                <Map mapdata = {mapsData} jobdata = {jobData}/>\r\n              </div>\r\n              <div class = \"col-md-5 tableFloat\">\r\n                <ShowTableData jobdata = {jobData}/>\r\n              </div> \r\n            </div>\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}